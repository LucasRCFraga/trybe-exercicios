/*ğŸš€ Modifique a variÃ¡vel para que respeite o escopo em 
que estÃ¡ sendo declarada. Lembre-se: para que a variÃ¡vel 
respeite o escopo, ela nÃ£o deve ser acessÃ­vel fora do 
escopo em que esteja sendo declarada.

Copie o cÃ³digo a seguir e rode-o para verificar sua saÃ­da.

*/

// function imprimeIdade() {
//     for (let idade = 30; idade <= 40; idade += 1) {
//       console.log('Idade dentro do for:', idade)
//     }
//     // console.log('Idade fora do for:', idade) // retire essa linha ao implementar o tipo de variÃ¡vel correta.
//   }
//   imprimeIdade()


/**ğŸš€ Altere o valor das propriedades do objeto para que respeite as caracterÃ­sticas da variÃ¡vel do tipo const. */
// // Executando esse cÃ³digo, recebe-se um erro `TypeError: Assignment to constant variable.`
// const pessoa = {
//   nome: 'Henri',
//   idade: 20
// }

// pessoa.nome = 'Luna',
// pessoa.idade = 19

// // Altere essa estrutura para corrigir o erro.
// console.log('Nome:', pessoa.nome);
// console.log('Idade:', pessoa.idade);


/*ğŸš€ Modifique a variÃ¡vel para que nÃ£o ocorra Erro. */
// let favoriteFood = 'Lasanha';
// favoriteFood = 'HambÃºrguer';
// console.log(favoriteFood);



/*ğŸš€ Modifique as concatenaÃ§Ãµes para template literals.   */
// const name = 'Adriana';
// const lastName = 'Soares';
// console.log('OlÃ¡' + ',' + name + ' ' + lastName + '!');
// console.log(`OlÃ¡, ${name} ${lastName}!`);
// function soma(a,b) {
//   let resultado = a + b;
//   return resultado;
// }
// let a = 3;
// let b = 5;
// console.log('O resultado da soma de ' + a + ' + ' + b + ' Ã©: ' + soma(a,b));
// console.log(`O resultado da soma de ${a} + ${b} Ã©: ${soma(a,b)}`);



/**ğŸš€ Modifique a estrutura das funÃ§Ãµes a seguir para que elas sejam arrow functions.

ğŸš€ Transforme a funÃ§Ã£o numeroAleatorio em uma arrow function. */
// function numeroAleatorio() {
//   return Math.random()
// }
// console.log(numeroAleatorio());

// const numeroAleatorio = () => Math.random;
// console.log(numeroAleatorio());



/**ğŸš€ Transforme a funÃ§Ã£o hello em uma arrow function. */
// function hello(nome) {
//   return `OlÃ¡, ${nome}!`
// }
// let nome = 'Ivan';
// console.log(hello(nome));

// let nome = 'Kris'
// const hello = (nome) => `OlÃ¡, ${nome}!`
// console.log(hello(nome));



/**ğŸš€ Transforme a funÃ§Ã£o nomeCompleto em uma arrow function. */
// function nomeCompleto(nome, sobrenome) {
//   return `${nome} ${sobrenome}`
// }

// const nomeCompleto = (nome, sobrenome) => `${nome} ${sobrenome}`

// let nome = 'Ivan';
// let sobrenome = 'Pires';

// console.log(nomeCompleto(nome, sobrenome));

/* 
PORQUE ASSIM ESTA DANDO ERRADO MAS DA FORMA ACIMA ESTA DANDO CERTO?

let nome = 'Ivan';
let sobrenome = 'Pires';
console.log(nomeCompleto(nome, sobrenome));

const nomeCompleto = (nome, sobrenome) => `${nome} ${sobrenome}`; 
*/



/**ğŸš€ Altere a expressÃ£o if/else utilizando ternary operator. */

// let speed = 90;
// const pergunta = (speed >= 120) ? `VocÃª ultrapassou o limite de velocidade` : `VocÃª estÃ¡ na velocidade permitida`;
// console.log(pergunta);

// const speedCar = (speed) => {
//   if (speed >= 120) {
//     return `VocÃª ultrapassou o limite de velocidade`;
//   } else {
//     return `VocÃª estÃ¡ na velocidade permitida`;
//   }
// };
// console.log(speedCar(speed));
